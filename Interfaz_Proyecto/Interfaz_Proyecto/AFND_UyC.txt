using System;
using System.Collections.Generic;

class AFND
{
    private int numEstados;
    private HashSet<char> alfabeto;
    private Dictionary<Tuple<int, char>, HashSet<int>> transiciones;
    private HashSet<int> estadosFinales;

    public AFND()
    {
        alfabeto = new HashSet<char>();
        transiciones = new Dictionary<Tuple<int, char>, HashSet<int>>();
        estadosFinales = new HashSet<int>();
    }

    public void CrearAFND(int afndNumber)
    {
        Console.WriteLine($"Ingrese los datos del AFND {afndNumber}:");
        Console.WriteLine("Ingrese el número de estados:");
        numEstados = int.Parse(Console.ReadLine());

        Console.WriteLine("Ingrese el alfabeto (separado por espacios):");
        string[] alfabetoInput = Console.ReadLine().Split(' ');
        foreach (string letra in alfabetoInput)
        {
            alfabeto.Add(letra[0]);
        }

        Console.WriteLine("Ingrese las transiciones (estado inicial, símbolo, estado destino), una por línea:");
        for (int i = 0; i < numEstados; i++)
        {
            string[] transicionInput = Console.ReadLine().Split(' ');
            int estadoInicial = int.Parse(transicionInput[0]);
            char simbolo = transicionInput[1][0];
            int estadoDestino = int.Parse(transicionInput[2]);

            if (!transiciones.ContainsKey(Tuple.Create(estadoInicial, simbolo)))
            {
                transiciones[Tuple.Create(estadoInicial, simbolo)] = new HashSet<int>();
            }
            transiciones[Tuple.Create(estadoInicial, simbolo)].Add(estadoDestino);
        }

        Console.WriteLine("Ingrese los estados finales (separados por espacios):");
        string[] estadosFinalesInput = Console.ReadLine().Split(' ');
        foreach (string estado in estadosFinalesInput)
        {
            estadosFinales.Add(int.Parse(estado));
        }
    }

    public HashSet<char> ObtenerAlfabeto()
    {
        return alfabeto;
    }

    public Dictionary<Tuple<int, char>, HashSet<int>> ObtenerTransiciones()
    {
        return transiciones;
    }

    public HashSet<int> ObtenerEstadosFinales()
    {
        return estadosFinales;
    }
}

class Program
{
    static AFND UnirAFNDs(List<AFND> afnds)
    {
        var nuevoAFND = new AFND();
        var alfabetoNuevo = new HashSet<char>();

        foreach (var afnd in afnds)
        {
            alfabetoNuevo.UnionWith(afnd.ObtenerAlfabeto());
        }

        nuevoAFND = new AFND
        {
            alfabeto = alfabetoNuevo
        };

        var nuevoTransiciones = new Dictionary<Tuple<int, char>, HashSet<int>>();

        int estadoActual = 0;

        foreach (var afnd in afnds)
        {
            foreach (var transicion in afnd.ObtenerTransiciones())
            {
                foreach (var estadoDestino in transicion.Value)
                {
                    var nuevaTransicion = Tuple.Create(estadoActual + transicion.Key.Item1, transicion.Key.Item2);
                    if (!nuevoTransiciones.ContainsKey(nuevaTransicion))
                    {
                        nuevoTransiciones[nuevaTransicion] = new HashSet<int>();
                    }

                    foreach (var estadoDestinoModificado in afnds.FindIndex(a => a == afnd) == afnds.Count - 1 ? afnds.Last().ObtenerEstadosFinales() : new HashSet<int> { estadoDestino + estadoActual })
                    {
                        nuevoTransiciones[nuevaTransicion].Add(estadoDestinoModificado);
                    }
                }
            }

            estadoActual += afnd.numEstados;
        }

        nuevoAFND.transiciones = nuevoTransiciones;

        foreach (var afnd in afnds)
        {
            foreach (var estadoFinal in afnd.ObtenerEstadosFinales())
            {
                nuevoAFND.estadosFinales.Add(estadoActual - afnd.numEstados + estadoFinal);
            }
        }

        nuevoAFND.numEstados = estadoActual;

        return nuevoAFND;
    }

    static AFND ConcatenarAFNDs(List<AFND> afnds)
    {
        var nuevoAFND = new AFND();
        var alfabetoNuevo = new HashSet<char>();

        foreach (var afnd in afnds)
        {
            alfabetoNuevo.UnionWith(afnd.ObtenerAlfabeto());
        }

        nuevoAFND = new AFND
        {
            alfabeto = alfabetoNuevo
        };

        var nuevoTransiciones = new Dictionary<Tuple<int, char>, HashSet<int>>();

        int estadoActual = 0;

        foreach (var afnd in afnds)
        {
            foreach (var transicion in afnd.ObtenerTransiciones())
            {
                foreach (var estadoDestino in transicion.Value)
                {
                    var nuevaTransicion = Tuple.Create(estadoActual + transicion.Key.Item1, transicion.Key.Item2);
                    if (!nuevoTransiciones.ContainsKey(nuevaTransicion))
                    {
                        nuevoTransiciones[nuevaTransicion] = new HashSet<int>();
                    }

                    foreach (var estadoDestinoModificado in transicion.Value)
                    {
                        nuevoTransiciones[nuevaTransicion].Add(estadoDestinoModificado + estadoActual);
                    }
                }
            }

            estadoActual += afnd.numEstados;
        }

        nuevoAFND.transiciones = nuevoTransiciones;

        foreach (var estadoFinal in afnds.Last().ObtenerEstadosFinales())
        {
            nuevoAFND.estadosFinales.Add(estadoActual - afnds.Last().numEstados + estadoFinal);
        }

        nuevoAFND.numEstados = estadoActual;

        return nuevoAFND;
    }

    static void Main(string[] args)
    {
        List<AFND> afnds = new List<AFND>();

        while (true)
        {
            Console.WriteLine("\nMENU:");
            Console.WriteLine("1. Unión de AFNDs");
            Console.WriteLine("2. Concatenación de AFNDs");
            Console.WriteLine("3. Salir");

            Console.Write("Ingrese su elección: ");
            int opcion = int.Parse(Console.ReadLine());

            switch (opcion)
            {
                case 1:
                    afnds.Clear();
                    Console.Write("Ingrese cuántos AFNDs desea unir: ");
                    int cantidadAFNDsUnion = int.Parse(Console.ReadLine());
                    for (int i = 0; i < cantidadAFNDsUnion; i++)
                    {
                        var afnd = new AFND();
                        afnd.CrearAFND(i + 1);
                        afnds.Add(afnd);
                    }
                    AFND afndUnion = UnirAFNDs(afnds);
                    Console.WriteLine("\nResultado de la unión de AFNDs:");
                    afndUnion.MostrarAFND();
                    break;

                case 2:
                    afnds.Clear();
                    Console.Write("Ingrese cuántos AFNDs desea concatenar: ");
                    int cantidadAFNDsConcatenacion = int.Parse(Console.ReadLine());
                    for (int i = 0; i < cantidadAFNDsConcatenacion; i++)
                    {
                        var afnd = new AFND();
                        afnd.CrearAFND(i + 1);
                        afnds.Add(afnd);
                    }
                    AFND afndConcatenacion = ConcatenarAFNDs(afnds);
                    Console.WriteLine("\nResultado de la concatenación de AFNDs:");
                    afndConcatenacion.MostrarAFND();
                    break;

                case 3:
                    Console.WriteLine("¡Hasta luego!");
                    return;

                default:
                    Console.WriteLine("Opción no válida. Intente de nuevo.");
                    break;
            }
        }
    }
}
